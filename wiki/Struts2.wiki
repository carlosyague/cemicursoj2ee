#summary Guía introductoria a Struts 2
#sidebar TableOfContents

[http://struts.apache.org/2.1.8/index.html http://struts.apache.org/2.1.8/images/struts2.png]

 * [Struts2#Introducci&oacute;n Introducción]
 * [Struts2#Contenido Contenido]
 * [Struts2#Ejemplos_introductorios Ejemplos introductorios]
 * [Struts2#Ejemplo_de_aplicaci&oacute;n_Struts_2_b&aacute;sica_de_CRUDs_de_entidades Ejemplo de aplicación Struts 2 básica de CRUDs de entidades]
   * [Struts2#Creamos_la_estructura_a_partir_de_un_archetipo_Maven Creamos la estructura a partir de un archetipo Maven]
   * [Struts2#Compilamos_el_proyecto_Maven Compilamos el proyecto Maven]
   * [Struts2#Desplegamos_la_aplicaci&oacute;n_en_un_Servidor Desplegamos la aplicación en un Servidor]
   * [Struts2#Ejecutamos_la_aplicaci&oacute;n Ejecutamos la aplicación]
   * [Struts2#Importamos_a_Eclipse_el_proyecto_Maven Importamos a Eclipse el proyecto Maven]
   * [Struts2#Creamos_una_nueva_Entidad Creamos una nueva Entidad]
 * [Struts2#Ejemplo_de_aplicaci&oacute;n_Struts_2_b&aacute;sica_de_CRUDs_sin_Appfuse Ejemplo de aplicación Struts 2 básica de CRUDs de entidades sin Appfuse]

= Introducción =

Sitio: http://struts.apache.org/2.1.8/index.html

Documentación oficial: http://struts.apache.org/2.1.8/docs/core-developers-guide.html

Tutoriales recomendados: http://struts.apache.org/2.1.8/docs/tutorials.html

[http://www.opensymphony.com/webwork/ http://struts.apache.org/2.1.8/images/struts2-merger2.png]

Extraído de `struts-2.1.8\src\core\pom.xml`
{{{
<dependency>
  <groupId>com.opensymphony</groupId>
  <artifactId>xwork-core</artifactId>
  <version>2.1.6</version>
</dependency>
}}}

_Obtengo los fuentes tanto de [http://release.opensymphony.com/xwork/2.1.5/xwork-2.1.5-src.zip OpenSymphony xwork-core 2.1.5], como de [http://struts.apache.org/download.cgi#struts218 Apache Struts 2.1.8] para incluirlos en el debugger de Eclipse_

Tutorial: http://www.vaannila.com/struts-2/struts-2-tutorial/struts-2-tutorial.html

[http://www.vaannila.com/struts-2/struts-2-tutorial/struts-2-tutorial.html http://www.vaannila.com/images/struts2/Interceptor1Pic1.gif]

= Contenido =

 * Concepto de Struts
   * Action Oriented Framework basado en el patrón MVC al igual que Struts 1
   * MVC en partes:
     * El *Modelo* es el _Action_
       * Se trata del estado interno de la aplicación. Este estado se compone del modelo de datos (datos transferidos) y de la lógica de negocio (funcionalidades con esos datos).
     * La *Vista* es el _Result_
     * El *Controlador* es el _FilterDispatcher_
       * Se trata de un _front-controller_ (es el primer componente que procesa una petición)
       * A grandes rasgos la tarea del controlador es realizar la traducción de una petición HTTP a una instancia de un _action_.
       * Esta tarea la realiza el _FilterDispatcher_. Se trata de un _servlet filter_ que inspecciona para cada petición entrante qué _action_ Struts2 debería procesar la petición.
       * Hay dos formas de definir este mapeo `URL-action`:
         * A través del fichero de configuración `struts.xml`
         * A través de anotaciones Java 1.5
   * Struts 2 no es sólo una nueva versión de Struts 1, es un framework completamente nuevo basado en la arquitectura de _OpenSymphony WebWork framework_
   * Es un framework de desarrollo de aplicaciones web de segunda generación.
   * Al igual que Struts 1, Struts 2  tiene un diseño robusto (utilización de patrones de diseño y buenas prácticas)
 * Componentes estándares de Struts
 * Flujo de Control en Struts
 * Procesamiento de Peticiones
 * Control de Errores
 * Manejo de Formularios
 * Librerías de Etiquetas (_TagLibs_)
 * Internacionalización
 * Mejoras y ventajas respecto a la versión 1.3
   * Inclusión de mecanismos como Interceptores
   * Configuración basada en anotaciones (Java 1.5 Annotations)
   * Inclusión de OGNL
   * Un API de etiquetas que constitute un mini-MVC modificable y que permite reutilizar _UI Components_
   * Según la documentación oficial de Struts, la migración de una aplicación `Struts` a `Struts2` es directa. Es compatible hacia atrás. No obstante: http://www.infoq.com/articles/converting-struts-2-part1 

= Ejemplos introductorios =

 # Struts 2 Annotation Tutorial 1 [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2Example1/ Struts2Example1]
 # Struts 2 Annotation Tutorial 2 [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2Example2/ Struts2ExampleAnnotations]
   * http://struts.apache.org/2.0.11.1/docs/annotations.html
 # Struts 2 Hello World Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2HelloWorld1/ Struts2HelloWorld1]
 # Struts 2 UI Tags Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2Example7/ Struts2ExampleUITags]
   * http://struts.apache.org/2.0.11.1/docs/ui-tags.html
   * Ver StrutsXML > "2.7 Action. Utilizando _wildcards_ (*) para definir _actions_ dinámicos"
 # Struts 2 Data Tags Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2Example11/ Struts2ExampleDataTags]
 # Struts 2 Bean Tag Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2Example12/ Struts2ExampleBeanTag]
 # Struts 2 Control Tags Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2Example10/ Struts2ExampleControlTags]
 # Struts 2 OGNL Expression Language Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleOGNL/ Struts2ExampleOGNL]
   * _OGNL:_ http://www.opensymphony.com/ognl/
 # Struts 2 Interceptors Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleInterceptor1/ Struts2ExampleInterceptor1]
 # Struts 2 Interceptors Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleInterceptor2/ Struts2ExampleInterceptor2]
   * _XWork Default Interceptors:_ http://www.opensymphony.com/xwork/wikidocs/XWork%20Interceptors.html
   * http://struts.apache.org/2.1.8/docs/interceptors.html
 # DispatchAction Functionality in Struts 2 Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleDispatchAction1/ Struts2ExampleDispatchAction1]
 # Dynamic Method Invocation Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleDynamicMethodInvocation/ Struts2ExampleDynamicMethodInvocation]
 # Struts 2 Validation Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleValidation1/ Struts2ExampleValidation1]
 # Struts 2 Validation Using XML File Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleValidation2/ Struts2ExampleValidation2]
   * _XWork Validation Framework:_ http://www.opensymphony.com/xwork/wikidocs/Validation%20Framework.html 
   * http://struts.apache.org/2.1.8/docs/validation.html
 # Domain Object as JavaBeans Property Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleDomainObject/ Struts2ExampleDomainObject]
 # Struts 2 ModelDriven Action Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleModelDriven/ Struts2ExampleModelDriven]
   * http://struts.apache.org/2.1.8/docs/model-driven.html
 # Struts 2 File Upload Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleFileUpload/ Struts2ExampleFileUpload] 
 # Struts 2 Tiles Integration Tutorial [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleTiles/ Struts2ExampleTiles]

http://cemicursoj2ee.googlecode.com/files/ejercicio.GIF *Ejercicio 1:*
A partir del ejemplo *Struts2ExampleFileUpload* crear un _action_ que permita efectuar la descarga de archivos almacenados en disco. Será invocado a través de una JSP: `solicitarFichero.jsp`:

http://cemicursoj2ee.googlecode.com/files/ejercicio1.JPG

Este action deberá denominarse `FileDownloadAction` y tendrás dos _properties_:
 * `String filename;` // nombre del fichero que queremos descargar
 * `String fileContentType;` // tipo-mime que nos servirá para establecer el _contentType_ de la _response_.. `response.setContentType(fileContentType);`
La ruta por defecto de estos ficheros en el servidor deberá ser la misma que la usada en el [http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2ExampleFileUpload/src/vaannila/FileUploadAction.java FileUploadAction] .. 
{{{
private static final String  UPLOADS_DIRECTORY = "c:/uploads/";
}}}

Pistas: 
 * http://code.google.com/p/cemicursoj2ee/wiki/StrutsXML#5._Tipos_de_resultados

= Ejemplo de aplicación Struts 2 básica de CRUDs de entidades =

_NOTA: Para poder probar este ejemplo deberemos instalarnos ApacheMaven2 y MySQL 5.0_

== Creamos la estructura a partir de un archetipo Maven ==

Creamos una aplicación *struts2app* a partir del archetipo Maven *Struts 2 Basic*:

Nos abrimos una consola de comandos y nos situamos en el directorio de nuestro workspace de Eclipse `C:\CEMi_J2EE`:

{{{
C:\CEMi_J2EE> mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-basic-struts -DremoteRepositories=http://static.appfuse.org/releases -DarchetypeVersion=2.0.2 -DgroupId=es.cemi.samples -DartifactId=struts2app
}}}

== Compilamos el proyecto Maven == 

A continuación realizamos la primera compilación del ejemplo. Dicha compilación con Maven tiene asociada una descarga importante de JARs que puede tardar mucho tiempo. Para acelerar este proceso, contamos en el aptdo. de descargas con un *repository.rar* que podremos descomprimir en nuestro repositorio Maven: `%M2_HOME%\repository`

Una vez tengamos todos los JARs, ya podemos proceder a realizar la primera compilación:

{{{
C:\CEMi_J2EE\struts2app> mvn clean install
}}}

{{{
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8 minutes 1 second
[INFO] Finished at: Thu Oct 22 21:32:14 CEST 2009
[INFO] Final Memory: 65M/254M
[INFO] ------------------------------------------------------------------------
C:\CEMi_J2EE\struts2app>
}}}

== Desplegamos la aplicación en un Servidor ==

Arrancamos la aplicación mediante el [http://mojo.codehaus.org/tomcat-maven-plugin/ Tomcat Maven Plugin]:

{{{
C:\CEMi_J2EE\struts2app> mvn tomcat:run-war
}}} 

{{{
[INFO] [war:war {execution: default-war}]
...
[INFO] Generating war C:\00-FACTORIA\Proyectos\CEMi_J2EE\struts2app\target\struts2app-1.0-SNAPSHOT.war
[INFO] Building war: C:\00-FACTORIA\Proyectos\CEMi_J2EE\struts2app\target\struts2app-1.0-SNAPSHOT.war
[INFO] [tomcat:run-war {execution: default-cli}]
[INFO] Running war on http://localhost:8080/struts2app
...
INFO: Initializing Spring root WebApplicationContext
[struts2app] WARN [main] Settings.getLocale(143) | Settings: Could not parse struts.locale setting, substituting default VM locale
23-oct-2009 16:01:07 org.apache.coyote.http11.Http11Protocol init
INFO: Initializing Coyote HTTP/1.1 on http-8080
23-oct-2009 16:01:07 org.apache.coyote.http11.Http11Protocol start
INFO: Starting Coyote HTTP/1.1 on http-8080
}}}

== Ejecutamos la aplicación ==

Accedemos a la aplicación desde un navegador: http://localhost:8080/struts2app

Introducimos las credenciales: `admin`/`admin`

== Importamos a Eclipse el proyecto Maven ==

Por último, importamos *struts2app* a nuestro _workspace_ de Eclipse. Para realizar esta operación, tenemos dos posibilidades:
 # Utilizamos el plugin de Eclipse para Maven: [http://www.eclipse.org/iam/ Eclipse IAM]
 # Utilizamos el plugin de Maven [http://maven.apache.org/plugins/maven-eclipse-plugin/ Maven Eclipse Plugin], tal y como se explica en [ApacheMaven2#Convertir_un_proyecto_Maven_a_Eclipse Convertir un proyecto Maven a Eclipse]

== Creamos una nueva Entidad ==

Creamos una Entidad `Person` con anotaciones JPA:

`es.cemi.samples.model.Person`
{{{
import org.appfuse.model.BaseObject;

import javax.persistence.Entity;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.GeneratedValue;
import javax.persistence.Column;

@Entity
public class Person extends BaseObject {
  private Long id;
  private String firstName;
  private String lastName;
  
  // Eclipse > Source > Generate getter & setters
  ..
  @Id @GeneratedValue(strategy = GenerationType.AUTO) 
  public Long getId() {
  ..
  @Column(name="first_name", length=50)
  public String getFirstName() {
  ..
  @Column(name="last_name", length=50)
  public String getLastName() {
  ..
}
}}}

Invocamos al plugin de AppFuse para la generación de todo el esqueleto de código asociado a dicha entidad:

{{{
C:\CEMi_J2EE\struts2app>mvn appfuse:gen -Dentity=Person
}}}

Esta acción genera los siguientes archivos:
 * src/main/java/es/cemi/samples/webapp/action/PersonAction.java
 * src/main/resources/es/cemi/samples/model/Person-validation.xml
 * src/main/resources/es/cemi/samples/webapp/action/PersonAction-validation.xml
 * src/main/webapp/WEB-INF/pages/personForm.jsp
 * src/main/webapp/WEB-INF/pages/personList.jsp
 * src/test/java/es/cemi/samples/webapp/action/PersonActionTest.java

Y modifica los siguientes:
 * src/main/resources/ApplicationResources.properties
 * src/main/resources/hibernate.cfg.xml
   * Mapeamos la nueva entidad en Hibernate:
   {{{
   <mapping class="es.cemi.samples.model.Person"/>
   }}}
 * src/main/resources/struts.xml
   * Declaramos en Struts2 las instancias que vamos a utilizar en las JSPs para esta entidad Person
   {{{
   <action name="persons" class="es.cemi.samples.webapp.action.PersonAction" method="list">
     <result>/WEB-INF/pages/personList.jsp</result>
   </action>
   
   <action name="editPerson" class="es.cemi.samples.webapp.action.PersonAction" method="edit">
     <result>/WEB-INF/pages/personForm.jsp</result>
     <result name="error">/WEB-INF/pages/personList.jsp</result>
   </action>
   
   <action name="savePerson" class="es.cemi.samples.webapp.action.PersonAction" method="save">
     <result name="input">/WEB-INF/pages/personForm.jsp</result>
     <result name="cancel" type="redirect-action">persons</result>
     <result name="delete" type="redirect-action">persons</result>
     <result name="success" type="redirect-action">persons</result>
   </action>
   }}}
 * src/main/webapp/common/menu.jsp
 * src/main/webapp/WEB-INF/applicationContext.xml
   * Creamos una instancia nueva de DAO genérico y Manager genérico para esta nueva entidad en el contexto de Spring
   {{{
   <bean id="personManager" class="org.appfuse.service.impl.GenericManagerImpl">
     <constructor-arg>
       <bean class="org.appfuse.dao.hibernate.GenericDaoHibernate">
         <constructor-arg value="es.cemi.samples.model.Person"/>
         <property name="sessionFactory" ref="sessionFactory"/>
        </bean>
      </constructor-arg>
    </bean>
    }}}
 * src/main/webapp/WEB-INF/menu-config.xml
 * src/test/resources/sample-data.xml
 * src/test/resources/web-tests.xml
 
Recompilamos la aplicación. Ver [Struts2#Compilamos_el_proyecto_Maven Compilamos el proyecto Maven]

Y volvemos a desplegar la aplicación a Tomcat. Ver [Struts2#Desplegamos_la_aplicaci&oacute;n_en_un_Servidor Desplegamos la aplicación en un Servidor]

Si analizamos cualquier de las JSPs generadas, por ejemplo: `personList.jsp`. Rapidamente nos daremos cuenta de que no contamos con algunos archivos como de forma directa.
 * `/common/taglibs.jsp` no se encuentra en nuestro workspace
 * Etc

La respuesta a la ausencia de estos archivos está en la existencia de una dependencia _WAR Overlay_ en nuestro POM. Ver [http://maven.apache.org/plugins/maven-war-plugin/overlays.html Maven WAR Plugin - Overlays]:

{{{
<dependency>
  <groupId>org.appfuse</groupId>
  <artifactId>appfuse-struts</artifactId>
  <version>2.0.2</version>
  <type>war</type>
</dependency>
}}}

Dicha dependencia se encuentra localizada en nuestro repositorio local Maven:
* `%M2_REPO%\org\appfuse\appfuse-struts\2.0.2\appfuse-struts-2.0.2.war`

= Ejemplo de aplicación Struts 2 básica de CRUDs de entidades sin Appfuse =

La aplicación que hemos generado antes nos ha servido para analizar que elementos constituyen una aplicación CRUD en Struts2, Spring e Hibernate. 
No obstante, tenemos un problema con Eclipse, ya que no funciona correctamente la integración entre Maven y los WTP Servers. Este problema debería resolverlo [http://www.eclipse.org/iam/ Eclipse IAM], pero... este plugin está verde todavía, así que lo mejor es refactorizar el proyecto anterior para poder trabajar facilmente con un WTP Server.

== Importamos el proyecto Struts2Webapp ==

`Eclipse > File > Import > SVN > Checkout Projects from SVN`

http://cemicursoj2ee.googlecode.com/svn/trunk/Struts2Webapp/

Desplegamos dicho proyecto en el WTP Server que creamos con los ejemplos introductorios y lo arrancamos.

En dicho proyecto se ha simplificado toda la capa web de Appfuse, dejando unicamente las JSPs del listado y detalle de personas.

Para *Hibernate*:
{{{
+ /src/main/java
  + es.cemi.samples.model.Person
+ /src/main/resources
  - hibernate.cfg.xml
  - jdbc.properties
}}}

Para *Spring*:
{{{
+ /src/main/resources
  - applicationContext-resources.xml

+ /WebContent/WEB-INF
  - applicationContext.xml
  - security.xml
}}}

Para *Struts2*:
{{{
+ /src/main/java
  + es.cemi.samples.webapp.action.PersonAction
  + org.appfuse.webapp.action.BaseAction
  
+ /src/main/resources
  - struts2.xml
  - ApplicationResources*.properties
  - errors*.properties
  - displaytag*.properties
  
+ /WebContent
  - index.jsp

+ /WebContent/common
  - taglibs.jsp
  
+ /WebContent/WEB-INF
  - appfuse.tld

+ /WebContent/WEB-INF/pages
  - personList.jsp
  - personForm.jsp
}}}

http://cemicursoj2ee.googlecode.com/files/ejercicio.GIF *Ejercicio 2*:
Si creamos una nueva persona, vemos que se permite que los campos sean vacios. Crear un validador de esa página que evite que los campos puedan ser vacíos.

http://cemicursoj2ee.googlecode.com/files/ejercicio.GIF *Ejercicio 3*:
Crear un interceptor de acceso seguro a cada página. Dicho interceptor deberá comprobar si existe en sesión el usuario logado, realizando dos posibles acciones:
 * Redirigir a la página de _login_ si no existe el usuario en sesión 
 * Permitir acceder a la página solicitada
 
Será necesario crear una página `login.jsp` en la que podamos incluir la *Cuenta de E-Mail* del usuario y su *Contraseña*.

= Mecanismo para crear operaciones de tipo CRUD en el mismo _Action_ =
struts.xml
{{{
<action name="*/*" method="{2}" class="es.cemi.sample.{1}Action">
  <result type="redirect">/{1}/view.action</result>
  <result name="view">/{1}/view.jsp</result>
  <result name="input">/{1}/edit.jsp</result>
  <result name="home">/{1}/home.jsp</result>
</action>
}}}

Para una entidad `User`, su _Action_ quedaría de la siguiente forma:

{{{
public class UserAction extends ActionSupport implements ModelDriven, Preparable {
  private User user;
  private int id;
  private UserService service; // user business service
  …
  
  public void setId(int id) {
    this.id = id;
  }
  
  /**
    create a new user if none exists, otherwise
    load the user with the specified id
   */
  public void prepare() throws Exception {
    if( id==0 ) {
      user = new User();
    } else {
      user = service.findUserById(id);
    }
  }
  
  public Object getModel() {
    return user;
  }
  
  /**
    create or update the user and then
    view the created user
   */
  public String update() {
    if( id==0 ) {
      service.create(user);
    } else {
      service.update(user);
    }
    return "redirect";
  }
  
  /**
    delete the user and go to a default home page
   */
  public String delete() {
    service.deleteById(id);
    return "home";
  }
  
  /**
    show the page allowing the user to
    view the existing data
   */
  public String view() {
    return "view";
  }
  
  /**
    show the page allowing the user to view
    the existing data and change the values
   */
  public String edit() {
    return "input";
  }
}
}}}