#summary Guía de instalación de Apache Maven 2

[http://maven.apache.org http://maven.apache.org/images/maven-logo-2.gif]

= Introducción =
En los ejemplos del curso vamos a utilizar Maven 2 como mecanismo de creación de nuestras aplicaciones de ejemplos

Libro _online_ *Better Builds with Maven*: http://www.maestrodev.com/better-build-maven
Tutorial *Maven in 5 Minutes*: http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html

= Instalación =
Vamos a utilizar archetipos [http://maven.apache.org Maven] para familiarizarnos rápidamente tanto con Struts 2 como con JSF.

Pasos:

 # Nos descargamos la última versión de Apache Maven: http://maven.apache.org/download.html
 # Descomprimimos el *apache-maven-2.2.1-bin.zip* en `C:\CEMi_J2EE\apache-maven-2.2.1`
 # Creamos la _variable de entorno_ de *sistema* *M2_HOME*
   * `M2_HOME=C:\CEMi_J2EE\apache-maven-2.2.1`
 # Creamos las _variables de entorno_ de *usuario* *M2* y *MAVEN_OPTS*
   * `M2=%M2_HOME%\bin`
   * `MAVEN_OPTS=-Xms256m -Xmx512m`
 # Añadimos al *Path* el directorio `bin` de Maven
   * `Path=%Path%;%M2%;`
 # Nos abrimos una consola y ejecutamos: `$> mvn --version`

{{{
Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.5.0_11
Java home: C:\CEMi_J2EE\jdk1.5.0_11\jre
Default locale: es_ES, platform encoding: Cp1252
OS name: "windows xp" version: "5.1" arch: "x86" Family: "windows"
}}}

_Recomendación para entornos Windows: Ya que la consola de comandos de Windows no cuenta con pestañas, se recomienda la utilización de *Console2*_ http://sourceforge.net/projects/console/ 

= Configuración =
Toda la configuración de Maven corre a cargo del fichero `%M2_HOME%\conf\settings.xml`.

En nuestro caso, queremos cambiar la ruta de nuestro repositorio de JARs 

{{{
<settings>
  <localRepository>${ruta_repositorio}</localRepository>
</settings>
}}}

La marca _localRepository_ viene comentada por defecto, estableciendose así el directorio `C:\Document and settings\${current_user}\.m2\repository`. 

Así que añadimos lo siguiente en dicho fichero, para unificar el emplazamiento del repositorio maven y evitar problemas con posibles nombres de usuario que contengan acentos.

{{{
<localRepository>C:\CEMi_J2EE\apache-maven-2.2.1\repository</localRepository>
}}}

= Control del ciclo de desarrollo =

 * Hasta ahora muchas fases de un proyecto Software eran gestionadas de una forma "pseudo-manual":
– Compilación
– Empaquetado
– Versionado
– Control de dependencias
– Generación de documentación
– ...
 * Maven es una herramienta que facilita la automatización de todas estas tareas.
 * Maven se involucra totalmente en la *Gestión de la Configuración*. Según la Wikipedia, se entiende por "Gestión de la Configuración" a ..
<p>
Se denomina Gestión de la Configuración al conjunto de
procesos destinados a asegurar la validez de todo producto
obtenido durante cualquiera de las etapas del desarrollo de un
Sistema de Información (S.I.), a través del estricto control de
los cambios realizados sobre los mismos y de la disponibilidad
constante de una versión estable de cada elemento para toda
persona involucrada en el citado desarrollo.
</p>

= Comprendiendo el POM (Project Object Model). =

 * El POM (Project Object Model) es la piedra angular de Maven.
 * En el fichero pom.xml se "declara" el proyecto. Esto quiere decir que Maven se basa en un conjunto de patrones y estándares.
   * Fases en el ciclo de construcción del proyecto
   * Estructura de directorios
   * ...
 * Esta es la principal diferencia frente a otros sistemas de automatización de tareas como Ant:
   * Muchos proyectos con diferentes scripts Ant, donde todos hacen básicamente lo mismo.

= Gestión automática de dependencias. =

= El repositorio de Maven. =

= Compilando y empaquetando. =

= Gestionando varios proyectos a la vez. =

= Preparando una release. =

= Generando informes automáticos. =



= ¿Cómo convertir un proyecto Maven en un proyecto Eclipse? =

Para generar los archivos _.project_, _.classpath_ y el directorio _.settings_ necesarios para generar el proyecto Eclipse de una aplicación Maven, procederemos de la siguiente forma:

{{{
C:\CEMi_J2EE\${app}> mvn eclipse:eclipse -o
}}}

Cada vez que añadamos una nueva dependencia y queramos que Eclipse actualice este JAR en el classpath, deberemos ejecutar el comando anterior y hacer un refresh (F5) del proyecto.

Una vez creado el proyecto, ya podremos importarlo a nuestro workspace de Eclipse.

Arrancamos Eclipse y establecemos como workspace `C:\CEMi_J2EE`. Importaremos nuestro proyecto mediante: `File > Import > General > Existing projects into workspace`
`C:\CEMi_J2EE\${app}`

Una vez hemos importado nuestro proyecto al _workspace_ de Eclipse, deberemos crear la siguiente variable de classpath `M2_REPO`. Para ello, accedemos a `Window > Preferences > Java > Build Path > Classpath Variables > New`:

Name: `M2_REPO`

Path: `C:\CEMi_J2EE\apache-maven-2.2.1\repository`

De esta forma Eclipse encontrará las referencias que hay establecidas en el fichero `.classpath` del proyecto.


= ¿Cómo refrescar el build path de un proyecto Eclipse, despues de añadir una dependencia nueva en el `pom.xml`? =

En este caso, el `.classpath` no cuenta con este nuevo JAR en el _classpath_ del proyecto, con lo que deberemos regerar el proyecto Eclipse.

{{{
C:\CEMi_J2EE\${app}> mvn eclipse:clean eclipse:eclipse -o
}}}

_El parámetro `-o` sirve para ejecutar Maven en modo offline. Este modo es conveniente utilizarlo siempre que sea posible.__

Si ya teníamos importado el proyecto y se ha regenerado el proyecto "en caliente" (con el Eclipse abierto), bastará con hacer un _Refresh_ (F5) de dicho proyecto. Si no comienza a compilar automaticamente, deberemos forzar la compilación mediante `Projec > Clean..`
